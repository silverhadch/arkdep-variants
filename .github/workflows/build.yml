name: 'Build Arkdep Images and Upload'

on:
  push:
    branches:
      - main
      - dev  # Added dev branch for testing purposes
  schedule:
    - cron: '0 5 * * *'  # Runs at 5 AM UTC daily

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        edition: 
          - arkanelinux
          - test-arkanelinux-kde
          - test-arkanelinux-pantheon
          - test-arkanelinux-znver4
          - test-debian-gnome
          - test-manjaro-kde
      fail-fast: false   # <-- Important: don't stop if one fails

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Free up disk space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true

    - name: Install basic dependencies
      shell: bash
      run: |
        sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe restricted multiverse"
        sudo apt-get install -y \
          gdisk zip systemd-container bmap-tools asciidoc \
          libarchive-tools git build-essential cmake \
          libarchive-dev pkg-config libcurl4-openssl-dev \
          libgpgme-dev libssl-dev fakeroot dh-autoreconf \
          haveged os-prober kwalify dosfstools libisoburn1 \
          squashfs-tools docbook2x mktorrent doxygen zstd \
          s3cmd curl btrfs-progs meson libkmod-dev libkmod2
        sudo apt remove -y multipath-tools multipath-tools-boot

    - name: Install pacman manually
      shell: bash
      env:
        PACMAN_VERSION: 6.0.2
      run: |
        git clone --depth 1 https://gitlab.archlinux.org/pacman/pacman.git
        pushd pacman
          wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
          tar -xvf pacman-${PACMAN_VERSION}.tar.xz
          pushd pacman-${PACMAN_VERSION}
            meson --prefix=/usr --buildtype=plain -Ddoc=disabled -Ddoxygen=disabled -Dscriptlet-shell=/usr/bin/bash -Dldconfig=/usr/bin/ldconfig build
            ninja -C build
            sudo ninja -C build install
          popd
        popd
        sudo mkdir -p /etc/pacman.d
        sudo touch /etc/pacman.d/mirrorlist
        sudo rm -rf pacman

    - name: Install archlinux-keyring
      shell: bash
      run: |
        sudo mkdir -p /usr/share/pacman/keyrings
        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo pacman-key --init
        sudo pacman-key --populate archlinux

    - name: Install arch-install-scripts
      shell: bash
      env:
        VERSION: "28"
      run: |
        wget https://github.com/archlinux/arch-install-scripts/archive/refs/tags/v${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        tar -xvf arch-install-scripts.tar.gz
        cd arch-install-scripts-${VERSION}
        make
        sudo make PREFIX=/usr install
        cd ..
        rm -rf arch-install-scripts*

    - name: Install arkdep
      shell: bash
      run: |
        git clone --depth 1 https://github.com/arkanelinux/arkdep.git
        sudo install -m755 arkdep/arkdep /usr/bin/
        sudo install -m755 arkdep/arkdep-build /usr/bin/

    - name: Clone variants repo
      shell: bash
      run: |
        git clone --depth 1 https://github.com/silverhadch/arkdep-variants.git arkdep-variants

    - name: Save the original pacman.conf into the Overlay
      shell: bash
      run: |
        VARIANT_DIR="arkdep-variants/arkdep-build.d/${{ matrix.edition }}" 
        OVERLAY_ETC_DIR="${VARIANT_DIR}/overlay/post_bootstrap/etc"
        PACMAN_CONF="${VARIANT_DIR}/pacman.conf"

        mkdir -p "$OVERLAY_ETC_DIR"
        cp "$PACMAN_CONF" "$OVERLAY_ETC_DIR"

    - name: Update SigLevel to Never in pacman.conf of each matrix variant
      shell: bash
      run: |
        VARIANT_DIR="arkdep-variants/arkdep-build.d/${{ matrix.edition }}"
        PACMAN_CONF="${VARIANT_DIR}/pacman.conf"

        if [ -f "$PACMAN_CONF" ]; then
          echo "Updating SigLevel in $PACMAN_CONF"
          sed -i 's/^SigLevel.*/SigLevel = Never/' "$PACMAN_CONF"
        else
          echo "pacman.conf not found in $VARIANT_DIR"
        fi

    - name: Build variant
      id: build
      shell: bash
      continue-on-error: true   # <-- Don't fail the entire matrix if this fails
      run: |
        mkdir -p target
        cd arkdep-variants
        sudo arkdep-build ${{ matrix.edition }}
        echo "Listing contents of target directory:"
        ls -lh target/
        ls -R target/
        artifact_path=$(realpath ./target/*.tar.zst || true)
        echo "${artifact_path}"
        echo "artifact-path=${artifact_path}" >> $GITHUB_OUTPUT

    - name: Upload tar.zst artifact
      if: steps.build.outputs.artifact-path != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.edition }}-image
        path: ${{ steps.build.outputs.artifact-path }}

    - name: Clean up old images
      shell: bash
      run: |
        find target -name "*.tar.zst" -type f -mtime +7 -exec rm {} \;
