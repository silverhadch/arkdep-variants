name: 'Build Arkdep Images and Upload'

on:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        edition:
          - lucos
          # - arkanelinux
          # - test-arkanelinux-kde
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Free up disk space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true

    - name: Install basic dependencies
      run: |
        sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe restricted multiverse"
        sudo apt-get update
        sudo apt-get install -y \
          gdisk zip systemd-container bmap-tools asciidoc \
          libarchive-tools git build-essential cmake \
          libarchive-dev pkg-config libcurl4-openssl-dev \
          libgpgme-dev libssl-dev fakeroot dh-autoreconf \
          haveged os-prober kwalify dosfstools libisoburn1 \
          squashfs-tools docbook2x mktorrent doxygen zstd \
          s3cmd curl btrfs-progs meson libkmod-dev libkmod2 rsync
        sudo apt remove -y multipath-tools multipath-tools-boot

    - name: Install pacman manually
      env:
        PACMAN_VERSION: 6.0.2
      run: |
        git clone --depth 1 https://gitlab.archlinux.org/pacman/pacman.git
        pushd pacman
          wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
          tar -xvf pacman-${PACMAN_VERSION}.tar.xz
          pushd pacman-${PACMAN_VERSION}
            meson --prefix=/usr --buildtype=plain -Ddoc=disabled -Ddoxygen=disabled -Dscriptlet-shell=/usr/bin/bash -Dldconfig=/usr/bin/ldconfig build
            ninja -C build
            sudo ninja -C build install
          popd
        popd
        sudo mkdir -p /etc/pacman.d
        sudo touch /etc/pacman.d/mirrorlist
        sudo rm -rf pacman

    - name: Install archlinux-keyring
      run: |
        sudo mkdir -p /usr/share/pacman/keyrings
        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo pacman-key --init
        sudo pacman-key --populate archlinux

    - name: Install arch-install-scripts
      shell: bash
      env:
        VERSION: "28"
      run: |
        wget https://github.com/archlinux/arch-install-scripts/archive/refs/tags/v${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        tar -xvf arch-install-scripts.tar.gz
        cd arch-install-scripts-${VERSION}
        make
        sudo make PREFIX=/usr install
        cd ..
        rm -rf arch-install-scripts*

    - name: Install arkdep
      run: |
        git clone --depth 1 https://github.com/arkanelinux/arkdep.git
        sudo install -m755 arkdep/arkdep /usr/bin/
        sudo install -m755 arkdep/arkdep-build /usr/bin/

    - name: Clone variants repo
      run: |
        REPO_NAME=$(basename -s .git "${{ github.repository }}")
        git clone -b main --depth 1 "https://github.com/${{ github.repository }}.git" "$REPO_NAME"

    - name: Build and Upload variant
      id: build-and-upload
      shell: bash
      env:
        SF_SSH_KEY: ${{ secrets.SF_SSH_KEY }}
      run: |
        set -eux

        # 1) Vorbereitung und Build
        REPO_NAME=$(basename -s .git "${{ github.repository }}")
        WORKSPACE="${GITHUB_WORKSPACE}/${REPO_NAME}"
        mkdir -p "${WORKSPACE}/target"
        cd "${WORKSPACE}"
        sudo arkdep-build ${{ matrix.edition }}

        echo "=== Build finished, listing target/ ==="
        ls -lh target/

        # 2) Checksumme und database erzeugen
        TAR_FILE=$(find target -maxdepth 1 -type f -name '*.tar.zst' | head -n1)
        PKGS_FILE=$(find target -maxdepth 1 -type f -name '*.pkgs'  | head -n1)
        DB_FILE="target/database"

        checksum=$(sha1sum "$TAR_FILE" | awk '{print $1}')
        filename=$(basename "$TAR_FILE")
        ext="${filename##*.}"
        id="${filename%%.*}"
        echo "${id}:${ext}:${checksum}" > "$DB_FILE"

        echo "TAR  -> $TAR_FILE"
        echo "PKGS -> $PKGS_FILE"
        echo "DB   -> $DB_FILE"

        # 3) SSH einrichten
        mkdir -p ~/.ssh
        echo "$SF_SSH_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan frs.sourceforge.net >> ~/.ssh/known_hosts

        # 4) Upload per rsync (nur wenn existiert)
        DEST="silverhadch@frs.sourceforge.net:/home/frs/project/lucos-arkdep/arkdep/lucos/"
        if [[ -f "$TAR_FILE" ]]; then
          rsync -avP --delete "$TAR_FILE" "$DEST"
        fi

        if [[ -f "$PKGS_FILE" ]]; then
          rsync -avP --delete "$PKGS_FILE" "$DEST"
        fi

        rsync -avP --delete "$DB_FILE" "$DEST"
